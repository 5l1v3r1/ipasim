From 6e6cda1576c8aad75d73d7c685b547245d3dd415 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Jone=C5=A1?= <jjones@outlook.cz>
Date: Tue, 14 May 2019 16:35:22 +0200
Subject: [PATCH] Squash branch `objc_port`

---
 .gitattributes                                |   5 +
 .gitignore                                    |  34 +++
 Libc-825.40.1/pthreads/pthread_machdep.h      |  10 +-
 .../usr/include/libkern/_OSByteOrder.h        |   2 +
 .../usr/include/libkern/i386/OSByteOrder.h    |   2 +
 MacOSX10.13.sdk/usr/include/mach-o/ldsyms.h   |   5 +
 MacOSX10.13.sdk/usr/include/mach-o/loader.h   |   5 +
 MacOSX10.13.sdk/usr/include/mach/mach.h       |  11 +
 MacOSX10.13.sdk/usr/include/mach/mach_init.h  |  24 +++
 MacOSX10.13.sdk/usr/include/mach/message.h    |   2 +
 MacOSX10.13.sdk/usr/include/mach/port.h       |   6 +
 MacOSX10.13.sdk/usr/include/mach/vm_types.h   |   8 +-
 MacOSX10.13.sdk/usr/include/sys/cdefs.h       |  13 ++
 MacOSX10.13.sdk/usr/include/sys/event.h       |   2 +
 README.md                                     |  25 +++
 dyld-519.2.2/include/mach-o/dyld_priv.h       | 201 +++++++-----------
 16 files changed, 231 insertions(+), 124 deletions(-)
 create mode 100644 .gitattributes
 create mode 100644 .gitignore
 create mode 100644 README.md

diff --git a/.gitattributes b/.gitattributes
new file mode 100644
index 00000000..718c5e96
--- /dev/null
+++ b/.gitattributes
@@ -0,0 +1,5 @@
+* text=auto
+
+# We need `.tbd` files to have LF line endings because they
+# are parsed by `tapi` which doesn't play nicely with CRLF.
+*.tbd text eol=lf
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 00000000..b5b15c2c
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,34 @@
+/MacOSX*.sdk/usr/share
+/MacOSX*.sdk/**/*.[o,a]
+/MacOSX*.sdk/**/*.tbd
+
+/Libc-*/*/**
+!/Libc-*/pthreads/pthread_machdep.h
+
+/dyld-*/*/*/**
+/dyld-*/*/*.*
+/dyld-*/*.*
+!/dyld-*/include/objc-shared-cache.h
+!/dyld-*/include/mach-o/dyld_priv.h
+
+/libplatform-*/*/*/**
+/libplatform-*/*/*.*
+/libplatform-*/*.*
+!/libplatform-*/private/os/lock_private.h
+!/libplatform-*/private/_simple.h
+
+/libclosure-*/**
+!/libclosure-*/Block_private.h
+
+/xnu-*/*/*/**
+/xnu-*/*/*.*
+/xnu-*/*.*
+/xnu-*/**/Makefile
+/xnu-*/**/newvers
+/xnu-*/**/MASTER
+/xnu-*/**/MasterVersion
+/xnu-*/**/*blacklist*
+!/xnu-*/bsd/sys/reason.h
+
+# Git Time Metric
+/.gtm/
diff --git a/Libc-825.40.1/pthreads/pthread_machdep.h b/Libc-825.40.1/pthreads/pthread_machdep.h
index 001a8ae2..41e2e55a 100644
--- a/Libc-825.40.1/pthreads/pthread_machdep.h
+++ b/Libc-825.40.1/pthreads/pthread_machdep.h
@@ -58,6 +58,9 @@
 #include <TargetConditionals.h>
 #include <stdint.h>
 
+// [port] CHANGED: Not supporting direct pthread keys.
+#ifndef OBJC_PORT
+
 /*
 ** Define macros for inline pthread_getspecific() usage.
 ** We reserve a number of slots for Apple internal use.
@@ -197,7 +200,6 @@
 ** This number can grow dynamically, no need to fix it.
 */
 
-
 #if defined(__cplusplus)
 extern "C" {
 #endif
@@ -211,6 +213,9 @@ int       pthread_key_init_np(int, void (*)(void *));
 }
 #endif
 
+// [port] !OBJC_PORT
+#endif
+
 typedef int pthread_lock_t;
 
 __inline__ static int
@@ -232,7 +237,8 @@ _pthread_has_direct_tsd(void)
 }
 
 #if TARGET_IPHONE_SIMULATOR || defined(__ppc__) || defined(__ppc64__) || \
-	(defined(__arm__) && !defined(_ARM_ARCH_7) && defined(_ARM_ARCH_6) && defined(__thumb__))
+	(defined(__arm__) && !defined(_ARM_ARCH_7) && defined(_ARM_ARCH_6) && defined(__thumb__)) \
+    || defined(OBJC_PORT) // [port] CHANGED: We want these instead of the assembly ones below.
 
 #define _pthread_getspecific_direct(key) pthread_getspecific((key))
 #define _pthread_setspecific_direct(key, val) pthread_setspecific((key), (val))
diff --git a/MacOSX10.13.sdk/usr/include/libkern/_OSByteOrder.h b/MacOSX10.13.sdk/usr/include/libkern/_OSByteOrder.h
index 3ceec32e..1c3da21c 100644
--- a/MacOSX10.13.sdk/usr/include/libkern/_OSByteOrder.h
+++ b/MacOSX10.13.sdk/usr/include/libkern/_OSByteOrder.h
@@ -37,7 +37,9 @@
  * <libkern/arch/_OSByteOrder.h> for little-endian architectures.
  */
 
+#if !defined(OBJC_PORT)
 #include <sys/_types.h>
+#endif
 
 /* Macros for swapping constant values in the preprocessing stage. */
 #define __DARWIN_OSSwapConstInt16(x) \
diff --git a/MacOSX10.13.sdk/usr/include/libkern/i386/OSByteOrder.h b/MacOSX10.13.sdk/usr/include/libkern/i386/OSByteOrder.h
index f38e0652..37beb605 100644
--- a/MacOSX10.13.sdk/usr/include/libkern/i386/OSByteOrder.h
+++ b/MacOSX10.13.sdk/usr/include/libkern/i386/OSByteOrder.h
@@ -30,8 +30,10 @@
 #define _OS_OSBYTEORDERI386_H
 
 #include <stdint.h>
+#if !defined(OBJC_PORT)
 #include <libkern/i386/_OSByteOrder.h>
 #include <sys/_types/_os_inline.h>
+#endif
 
 /* Functions for byte reversed loads. */
 
diff --git a/MacOSX10.13.sdk/usr/include/mach-o/ldsyms.h b/MacOSX10.13.sdk/usr/include/mach-o/ldsyms.h
index 3f28b1b1..9609ff01 100644
--- a/MacOSX10.13.sdk/usr/include/mach-o/ldsyms.h
+++ b/MacOSX10.13.sdk/usr/include/mach-o/ldsyms.h
@@ -87,6 +87,11 @@ _mh_bundle_header;
  */
 #define _MH_DYLIB_SYM	"__mh_dylib_header"
 #define MH_DYLIB_SYM	"_mh_dylib_header"
+// [port] CHANGED: If this was not marked `extern "C"`, it would be mangled badly.
+// [port] TODO: How come this works in the original code?
+#if defined(OBJC_PORT)
+extern "C"
+#endif
 extern const struct
 #ifdef __LP64__
 mach_header_64
diff --git a/MacOSX10.13.sdk/usr/include/mach-o/loader.h b/MacOSX10.13.sdk/usr/include/mach-o/loader.h
index dc1eb66f..21a19b90 100644
--- a/MacOSX10.13.sdk/usr/include/mach-o/loader.h
+++ b/MacOSX10.13.sdk/usr/include/mach-o/loader.h
@@ -23,6 +23,11 @@
 #ifndef _MACHO_LOADER_H_
 #define _MACHO_LOADER_H_
 
+// [port] TODO: Don't do this.
+#if defined(OBJC_PORT)
+#include <mach/vm_statistics.h>
+#endif
+
 /*
  * This file describes the format of mach object files.
  */
diff --git a/MacOSX10.13.sdk/usr/include/mach/mach.h b/MacOSX10.13.sdk/usr/include/mach/mach.h
index 00abb721..d23531b2 100644
--- a/MacOSX10.13.sdk/usr/include/mach/mach.h
+++ b/MacOSX10.13.sdk/usr/include/mach/mach.h
@@ -62,6 +62,14 @@
 #define __MACH30__
 #define MACH_IPC_FLAVOR UNTYPED
 
+// [port] CHANGED: Including only what's needed.
+#if defined(OBJC_PORT)
+#include <mach/vm_types.h> 	  // [port] for vm_address_t
+#include <mach/kern_return.h> // [port] for kern_return_t
+#include <mach/mach_init.h>	  // [port] for mach_task_self
+#include <mach/vm_statistics.h> // [port] for VM_*
+#else
+
 #include <mach/std_types.h>
 #include <mach/mach_types.h>
 #include <mach/mach_interface.h>
@@ -241,4 +249,7 @@ extern void voucher_mach_msg_revert(voucher_mach_msg_state_t state);
 
 __END_DECLS
 
+// [port] !defined(OBJC_PORT)
+#endif
+
 #endif	/* _MACH_H_ */
diff --git a/MacOSX10.13.sdk/usr/include/mach/mach_init.h b/MacOSX10.13.sdk/usr/include/mach/mach_init.h
index 85e8319a..dd4200b1 100644
--- a/MacOSX10.13.sdk/usr/include/mach/mach_init.h
+++ b/MacOSX10.13.sdk/usr/include/mach/mach_init.h
@@ -58,24 +58,45 @@
 #ifndef	_MACH_INIT_
 #define	_MACH_INIT_	1
 
+// [port] CHANGED: Not needed.
+#if !defined(OBJC_PORT)
+
 #include <mach/mach_types.h>
 #include <mach/vm_page_size.h>
 #include <stdarg.h>
 
 #include <sys/cdefs.h>
 
+// [port] !defined(OBJC_PORT)
+#endif
+
 /*
  *	Kernel-related ports; how a task/thread controls itself
  */
 
 __BEGIN_DECLS
+
+// [port] CHANGED: Not needed.
+#if !defined(OBJC_PORT)
+
 extern mach_port_t mach_host_self(void);
 extern mach_port_t mach_thread_self(void);
 extern kern_return_t host_page_size(host_t, vm_size_t *);
 
+// [port] !defined(OBJC_PORT)
+#endif
+
+// [port] CHANGED: mach_port_t is undefined.
+#if defined(OBJC_PORT)
+#define	mach_task_self() 0
+#else
 extern mach_port_t	mach_task_self_;
 #define	mach_task_self() mach_task_self_
 #define	current_task()	mach_task_self()
+#endif
+
+// [port] CHANGED: Not needed.
+#if !defined(OBJC_PORT)
 
 __END_DECLS
 #include <mach/mach_traps.h>
@@ -105,6 +126,9 @@ extern	mach_port_t	bootstrap_port;
  */
 extern int (*vprintf_stderr_func)(const char *format, va_list ap);
 
+// [port] !defined(OBJC_PORT)
+#endif
+
 __END_DECLS
 
 #endif	/* _MACH_INIT_ */
diff --git a/MacOSX10.13.sdk/usr/include/mach/message.h b/MacOSX10.13.sdk/usr/include/mach/message.h
index 4822eacf..e244a594 100644
--- a/MacOSX10.13.sdk/usr/include/mach/message.h
+++ b/MacOSX10.13.sdk/usr/include/mach/message.h
@@ -78,7 +78,9 @@
 #include <mach/machine/vm_types.h>
 
 #include <sys/cdefs.h>
+#if !defined(OBJC_PORT)
 #include <sys/appleapiopts.h>
+#endif
 #include <Availability.h>
 
 /*
diff --git a/MacOSX10.13.sdk/usr/include/mach/port.h b/MacOSX10.13.sdk/usr/include/mach/port.h
index 35de196e..3a0a65a1 100644
--- a/MacOSX10.13.sdk/usr/include/mach/port.h
+++ b/MacOSX10.13.sdk/usr/include/mach/port.h
@@ -123,12 +123,18 @@ typedef mach_port_name_t *mach_port_name_array_t;
  *
  */
 
+#if defined(OBJC_PORT)
+typedef unsigned int mach_port_t;
+#else
 #include <sys/_types.h>
 #include <sys/_types/_mach_port_t.h>
 
 
 typedef mach_port_t			*mach_port_array_t;
 
+// !defined(OBJC_PORT)
+#endif
+
 /*
  *  MACH_PORT_NULL is a legal value that can be carried in messages.
  *  It indicates the absence of any port or port rights.  (A port
diff --git a/MacOSX10.13.sdk/usr/include/mach/vm_types.h b/MacOSX10.13.sdk/usr/include/mach/vm_types.h
index 96a744f5..5f94f56f 100644
--- a/MacOSX10.13.sdk/usr/include/mach/vm_types.h
+++ b/MacOSX10.13.sdk/usr/include/mach/vm_types.h
@@ -32,7 +32,10 @@
 #ifndef	_MACH_VM_TYPES_H_
 #define _MACH_VM_TYPES_H_
 
+// [port] CHANGED: Not needed.
+#if !defined(OBJC_PORT)
 #include <mach/port.h>
+#endif
 #include <mach/machine/vm_types.h>
 
 #include <stdint.h>
@@ -68,7 +71,8 @@ typedef	uint32_t	reg64_t;
 typedef uint32_t ppnum_t;		/* Physical page number */
 #define PPNUM_MAX UINT32_MAX
 
-
+// [port] CHANGED: mach_port_t is undefined.
+#if !defined(OBJC_PORT)
 
 typedef mach_port_t		vm_map_t;
 
@@ -88,6 +92,8 @@ typedef uint64_t		vm_object_size_t;
 typedef mach_port_t		upl_t;
 typedef mach_port_t		vm_named_entry_t;
 
+// [port] !defined(OBJC_PORT)
+#endif
 
 #define UPL_NULL		((upl_t) 0)
 #define VM_NAMED_ENTRY_NULL	((vm_named_entry_t) 0)
diff --git a/MacOSX10.13.sdk/usr/include/sys/cdefs.h b/MacOSX10.13.sdk/usr/include/sys/cdefs.h
index 522437e0..0b7d5900 100644
--- a/MacOSX10.13.sdk/usr/include/sys/cdefs.h
+++ b/MacOSX10.13.sdk/usr/include/sys/cdefs.h
@@ -75,11 +75,14 @@
 #define	__END_DECLS
 #endif
 
+// [port] TODO: Why is this warning issued even though we use clang?
+#if !defined(OBJC_PORT)
 /* This SDK is designed to work with clang and specific versions of
  * gcc >= 4.0 with Apple's patch sets */
 #if !defined(__GNUC__) || __GNUC__ < 4
 #warning "Unsupported compiler detected"
 #endif
+#endif
 
 /*
  * Compatibility with compilers and environments that don't support compiler
@@ -115,6 +118,10 @@
 
 #define	__const		const		/* define reserved names to standard */
 #define	__signed	signed
+// [port] CHANGED: We must first undefine what MSVC headers defined.
+#if defined(OBJC_PORT)
+#   undef __volatile
+#endif
 #define	__volatile	volatile
 #if defined(__cplusplus)
 #define	__inline	inline		/* convert to C++ keyword */
@@ -581,6 +588,8 @@
 #define __DARWIN_EXTSN(sym)		__asm("_" __STRING(sym) __DARWIN_SUF_EXTSN)
 #define __DARWIN_EXTSN_C(sym)		__asm("_" __STRING(sym) __DARWIN_SUF_EXTSN __DARWIN_SUF_NON_CANCELABLE)
 
+// [port] CHANGED: Not needed.
+#if !defined(OBJC_PORT)
 /*
  * symbol release macros
  */
@@ -593,6 +602,7 @@
 #else
 #define __DARWIN_ALIAS_STARTING(_mac, _iphone, x)   x
 #endif
+#endif
 
 
 /*
@@ -649,10 +659,13 @@
 #define _POSIX_C_SOURCE         198808L
 #endif
 
+// [port] CHANGED: Not needed.
+#if !defined(OBJC_PORT)
 /* POSIX C deprecation macros */
 #include <sys/_posix_availability.h>
 
 #define __POSIX_C_DEPRECATED(ver) ___POSIX_C_DEPRECATED_STARTING_##ver
+#endif
 
 /*
  * Set a single macro which will always be defined and can be used to determine
diff --git a/MacOSX10.13.sdk/usr/include/sys/event.h b/MacOSX10.13.sdk/usr/include/sys/event.h
index 5400ad67..a99176cf 100644
--- a/MacOSX10.13.sdk/usr/include/sys/event.h
+++ b/MacOSX10.13.sdk/usr/include/sys/event.h
@@ -56,7 +56,9 @@
 #ifndef _SYS_EVENT_H_
 #define _SYS_EVENT_H_
 
+#if !defined(OBJC_PORT)
 #include <machine/types.h>
+#endif
 #include <sys/cdefs.h>
 #include <stdint.h>
 
diff --git a/README.md b/README.md
new file mode 100644
index 00000000..a8c21051
--- /dev/null
+++ b/README.md
@@ -0,0 +1,25 @@
+# `apple-headers` submodule
+
+As the title suggests, this repository is primarily meant as a submodule for the
+`IPASimulator` project.
+
+It contains `.h` files analyzed by `HeadersAnalyzer` and used by `objc` library
+port. The `iPhoneOS*.sdk` was obtained from a macOS machine with Xcode installed
+(in
+`/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk`),
+but it can also be downloaded from
+[airnativeextensions website](http://resources.airnativeextensions.com/ios/).
+Similarly the `MacOSX*.sdk`.
+
+The other folders are other Apple libraries obtained from the official
+[tarball repository](https://opensource.apple.com/tarballs/).
+
+Not everything from the original SDK and libraries is included, though, see
+[the `.gitignore` file](.gitignore) for more information on what's excluded.
+
+## Git tags
+
+We use the following tags as prefixes to commit messages:
+
+- `[dyld]`, `[iOS]`, `[Libc]`, `[closure]`, `[plat]`, `[macOS]`, `[xnu]`: These
+  correspond to the root folders.
diff --git a/dyld-519.2.2/include/mach-o/dyld_priv.h b/dyld-519.2.2/include/mach-o/dyld_priv.h
index 93f1b90f..b65a7ae8 100644
--- a/dyld-519.2.2/include/mach-o/dyld_priv.h
+++ b/dyld-519.2.2/include/mach-o/dyld_priv.h
@@ -3,14 +3,14 @@
  * Copyright (c) 2003-2010 Apple Inc. All rights reserved.
  *
  * @APPLE_LICENSE_HEADER_START@
- * 
+ *
  * This file contains Original Code and/or Modifications of Original Code
  * as defined in and that are subject to the Apple Public Source License
  * Version 2.0 (the 'License'). You may not use this file except in
  * compliance with the License. Please obtain a copy of the License at
  * http://www.opensource.apple.com/apsl/ and read it before using this
  * file.
- * 
+ *
  * The Original Code and all software distributed under the License are
  * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
@@ -18,7 +18,7 @@
  * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
  * Please see the License for the specific language governing rights and
  * limitations under the License.
- * 
+ *
  * @APPLE_LICENSE_HEADER_END@
  */
 #ifndef _MACH_O_DYLD_PRIV_H_
@@ -30,40 +30,39 @@
 #include <mach-o/dyld.h>
 #include <mach-o/dyld_images.h>
 
+// [port] CHANGED: `uuid_t` was undefined.
+#if defined(OBJC_PORT)
+// [port] From `darwin-xnu/_types.h`.
+typedef unsigned char uuid_t[16];
+#endif
+
 #if __cplusplus
 extern "C" {
 #endif /* __cplusplus */
 
-
-
 //
 // private interface between libSystem.dylib and dyld
 //
 extern void _dyld_fork_child();
 
-
 // DEPRECATED
-enum dyld_image_states
-{
-	dyld_image_state_mapped					= 10,		// No batch notification for this
-	dyld_image_state_dependents_mapped		= 20,		// Only batch notification for this
-	dyld_image_state_rebased				= 30, 
-	dyld_image_state_bound					= 40,
-	dyld_image_state_dependents_initialized	= 45,		// Only single notification for this
-	dyld_image_state_initialized			= 50,
-	dyld_image_state_terminated				= 60		// Only single notification for this
+enum dyld_image_states {
+    dyld_image_state_mapped = 10,            // No batch notification for this
+    dyld_image_state_dependents_mapped = 20, // Only batch notification for this
+    dyld_image_state_rebased = 30,
+    dyld_image_state_bound = 40,
+    dyld_image_state_dependents_initialized = 45, // Only single notification for this
+    dyld_image_state_initialized = 50,
+    dyld_image_state_terminated = 60 // Only single notification for this
 };
 
 // DEPRECATED
 typedef const char* (*dyld_image_state_change_handler)(enum dyld_image_states state, uint32_t infoCount, const struct dyld_image_info info[]);
 
-
-
 typedef void (*_dyld_objc_notify_mapped)(unsigned count, const char* const paths[], const struct mach_header* const mh[]);
 typedef void (*_dyld_objc_notify_init)(const char* path, const struct mach_header* mh);
 typedef void (*_dyld_objc_notify_unmapped)(const char* path, const struct mach_header* mh);
 
-
 //
 // Note: only for use by objc runtime
 // Register handlers to be called when objc images are mapped, unmapped, and initialized.
@@ -74,75 +73,68 @@ typedef void (*_dyld_objc_notify_unmapped)(const char* path, const struct mach_h
 // dyld will also call the "mapped" function.  Dyld will call the "init" function when dyld would be called
 // initializers in that image.  This is when objc calls any +load methods in that image.
 //
-void _dyld_objc_notify_register(_dyld_objc_notify_mapped    mapped,
-                                _dyld_objc_notify_init      init,
-                                _dyld_objc_notify_unmapped  unmapped);
-
-
+void _dyld_objc_notify_register(_dyld_objc_notify_mapped mapped,
+    _dyld_objc_notify_init                               init,
+    _dyld_objc_notify_unmapped                           unmapped);
 
 //
 // Possible thread-local variable state changes for which you can register to be notified
 //
 enum dyld_tlv_states {
-    dyld_tlv_state_allocated = 10,   // TLV range newly allocated
-    dyld_tlv_state_deallocated = 20  // TLV range about to be deallocated
+    dyld_tlv_state_allocated = 10,  // TLV range newly allocated
+    dyld_tlv_state_deallocated = 20 // TLV range about to be deallocated
 };
 
-// 
+//
 // Info about thread-local variable storage.
-// 
+//
 typedef struct {
-    size_t info_size;    // sizeof(dyld_tlv_info)
-    void * tlv_addr;     // Base address of TLV storage
-    size_t tlv_size;     // Byte size of TLV storage
+    size_t info_size; // sizeof(dyld_tlv_info)
+    void*  tlv_addr;  // Base address of TLV storage
+    size_t tlv_size;  // Byte size of TLV storage
 } dyld_tlv_info;
 
 #if __BLOCKS__
 
-// 
+//
 // Callback that notes changes to thread-local variable storage.
-// 
-typedef void (^dyld_tlv_state_change_handler)(enum dyld_tlv_states state, const dyld_tlv_info *info);
+//
+typedef void (^dyld_tlv_state_change_handler)(enum dyld_tlv_states state, const dyld_tlv_info* info);
 
 //
 // Register a handler to be called when a thread adds or removes storage for thread-local variables.
 // The registered handler will only be called from and on behalf of the thread that owns the storage.
-// The registered handler will NOT be called for any storage that was 
-//   already allocated before dyld_register_tlv_state_change_handler() was 
+// The registered handler will NOT be called for any storage that was
+//   already allocated before dyld_register_tlv_state_change_handler() was
 //   called. Use dyld_enumerate_tlv_storage() to get that information.
-// Exists in Mac OS X 10.7 and later 
-// 
-extern void 
+// Exists in Mac OS X 10.7 and later
+//
+extern void
 dyld_register_tlv_state_change_handler(enum dyld_tlv_states state, dyld_tlv_state_change_handler handler);
 
-// 
-// Enumerate the current thread-local variable storage allocated for the current thread. 
-// Exists in Mac OS X 10.7 and later 
 //
-extern void 
+// Enumerate the current thread-local variable storage allocated for the current thread.
+// Exists in Mac OS X 10.7 and later
+//
+extern void
 dyld_enumerate_tlv_storage(dyld_tlv_state_change_handler handler);
 
 #endif
 
-
 //
-// get slide for a given loaded mach_header  
+// get slide for a given loaded mach_header
 // Mac OS X 10.6 and later
 //
 extern intptr_t _dyld_get_image_slide(const struct mach_header* mh);
 
-
-
-struct dyld_unwind_sections
-{
-	const struct mach_header*		mh;
-	const void*						dwarf_section;
-	uintptr_t						dwarf_section_length;
-	const void*						compact_unwind_section;
-	uintptr_t						compact_unwind_section_length;
+struct dyld_unwind_sections {
+    const struct mach_header* mh;
+    const void*               dwarf_section;
+    uintptr_t                 dwarf_section_length;
+    const void*               compact_unwind_section;
+    uintptr_t                 compact_unwind_section_length;
 };
 
-
 //
 // Returns true iff some loaded mach-o image contains "addr".
 //	info->mh							mach header of image containing addr
@@ -151,19 +143,17 @@ struct dyld_unwind_sections
 //  info->compact_unwind_section		pointer to start of __TEXT/__unwind_info section
 //  info->compact_unwind_section_length	length of __TEXT/__unwind_info section
 //
-// Exists in Mac OS X 10.6 and later 
+// Exists in Mac OS X 10.6 and later
 #if !__USING_SJLJ_EXCEPTIONS__
 extern bool _dyld_find_unwind_sections(void* addr, struct dyld_unwind_sections* info);
 #endif
 
-
 //
 // This is an optimized form of dladdr() that only returns the dli_fname field.
 //
-// Exists in Mac OS X 10.6 and later 
+// Exists in Mac OS X 10.6 and later
 extern const char* dyld_image_path_containing_address(const void* addr);
 
-
 //
 // This is an optimized form of dladdr() that only returns the dli_fbase field.
 // Return NULL, if address is not in any image tracked by dyld.
@@ -171,8 +161,6 @@ extern const char* dyld_image_path_containing_address(const void* addr);
 // Exists in Mac OS X 10.11 and later
 extern const struct mach_header* dyld_image_header_containing_address(const void* addr);
 
-
-
 // Convienence constants for return values from dyld_get_sdk_version() and friends.
 
 //@MAC_VERSION_DEFS@
@@ -181,16 +169,14 @@ extern const struct mach_header* dyld_image_header_containing_address(const void
 
 //@WATCHOS_VERSION_DEFS@
 
-
 //
 // This finds the SDK version a binary was built against.
 // Returns zero on error, or if SDK version could not be determined.
 //
-// Exists in Mac OS X 10.8 and later 
+// Exists in Mac OS X 10.8 and later
 // Exists in iOS 6.0 and later
 extern uint32_t dyld_get_sdk_version(const struct mach_header* mh);
 
-
 //
 // This finds the SDK version that the main executable was built against.
 // Returns zero on error, or if SDK version could not be determined.
@@ -199,18 +185,16 @@ extern uint32_t dyld_get_sdk_version(const struct mach_header* mh);
 // (i.e an app built against watchOS 2.0 SDK returne 9.0).  To see the
 // platform specific sdk version use dyld_get_program_sdk_watch_os_version().
 //
-// Exists in Mac OS X 10.8 and later 
+// Exists in Mac OS X 10.8 and later
 // Exists in iOS 6.0 and later
 extern uint32_t dyld_get_program_sdk_version();
 
-
 #if __WATCH_OS_VERSION_MIN_REQUIRED
 // watchOS only.
 // This finds the Watch OS SDK version that the main executable was built against.
 // Exists in Watch OS 2.0 and later
 extern uint32_t dyld_get_program_sdk_watch_os_version() __IOS_UNAVAILABLE __OSX_UNAVAILABLE __WATCHOS_AVAILABLE(2.0);
 
-
 // watchOS only.
 // This finds the Watch min OS version that the main executable was built to run on.
 // Note: dyld_get_program_min_os_version() returns the iOS equivalent (e.g. 9.0)
@@ -219,7 +203,6 @@ extern uint32_t dyld_get_program_sdk_watch_os_version() __IOS_UNAVAILABLE __OSX_
 extern uint32_t dyld_get_program_min_watch_os_version(); // __WATCHOS_AVAILABLE(3.0);
 #endif
 
-
 #if TARGET_OS_BRIDGE
 // bridgeOS only.
 // This finds the bridgeOS SDK version that the main executable was built against.
@@ -238,81 +221,68 @@ extern uint32_t dyld_get_program_min_bridge_os_version();
 // This finds the min OS version a binary was built to run on.
 // Returns zero on error, or if no min OS recorded in binary.
 //
-// Exists in Mac OS X 10.8 and later 
+// Exists in Mac OS X 10.8 and later
 // Exists in iOS 6.0 and later
 extern uint32_t dyld_get_min_os_version(const struct mach_header* mh);
 
-
 //
 // This finds the min OS version the main executable was built to run on.
 // Returns zero on error, or if no min OS recorded in binary.
 //
-// Exists in Mac OS X 10.8 and later 
+// Exists in Mac OS X 10.8 and later
 // Exists in iOS 6.0 and later
 extern uint32_t dyld_get_program_min_os_version();
 
-
-
-
 //
 // Returns if any OS dylib has overridden its copy in the shared cache
 //
-// Exists in iPhoneOS 3.1 and later 
+// Exists in iPhoneOS 3.1 and later
 // Exists in Mac OS X 10.10 and later
 extern bool dyld_shared_cache_some_image_overridden();
 
-
-	
 //
 // Returns if the process is setuid or is code signed with entitlements.
 //
 // Exists in Mac OS X 10.9 and later
 extern bool dyld_process_is_restricted();
 
-
-
 //
 // Returns path used by dyld for standard dyld shared cache file for the current arch.
 //
 // Exists in Mac OS X 10.11 and later
 extern const char* dyld_shared_cache_file_path();
 
-
-
 //
 // <rdar://problem/13820686> for OpenGL to tell dyld it is ok to deallocate a memory based image when done.
 //
 // Exists in Mac OS X 10.9 and later
-#define NSLINKMODULE_OPTION_CAN_UNLOAD                  0x20
-
+#define NSLINKMODULE_OPTION_CAN_UNLOAD 0x20
 
 //
-// Update all bindings on specified image. 
+// Update all bindings on specified image.
 // Looks for uses of 'replacement' and changes it to 'replacee'.
 // NOTE: this is less safe than using static interposing via DYLD_INSERT_LIBRARIES
 // because the running program may have already copy the pointer values to other
 // locations that dyld does not know about.
 //
 struct dyld_interpose_tuple {
-	const void* replacement;
-	const void* replacee;
+    const void* replacement;
+    const void* replacee;
 };
 extern void dyld_dynamic_interpose(const struct mach_header* mh, const struct dyld_interpose_tuple array[], size_t count);
 
-
 struct dyld_shared_cache_dylib_text_info {
-	uint64_t		version;		// current version 1
-	// following fields all exist in version 1
-	uint64_t		loadAddressUnslid;
-	uint64_t		textSegmentSize; 
-	uuid_t			dylibUuid;
-	const char*		path;			// pointer invalid at end of iterations
-	// following fields all exist in version 2
-	uint64_t        textSegmentOffset;  // offset from start of cache
+    uint64_t version; // current version 1
+    // following fields all exist in version 1
+    uint64_t    loadAddressUnslid;
+    uint64_t    textSegmentSize;
+    uuid_t      dylibUuid;
+    const char* path; // pointer invalid at end of iterations
+    // following fields all exist in version 2
+    uint64_t textSegmentOffset; // offset from start of cache
 };
 typedef struct dyld_shared_cache_dylib_text_info dyld_shared_cache_dylib_text_info;
 
-
 #ifdef __BLOCKS__
 //
 // Given the UUID of a dyld shared cache file, this function will attempt to locate the cache
@@ -322,7 +292,6 @@ typedef struct dyld_shared_cache_dylib_text_info dyld_shared_cache_dylib_text_in
 //           iOS 9.0 and later
 extern int dyld_shared_cache_iterate_text(const uuid_t cacheUuid, void (^callback)(const dyld_shared_cache_dylib_text_info* info));
 
-
 //
 // Given the UUID of a dyld shared cache file, and a NULL terminated array of extra directory paths to search,
 // this function will scan the standard and extra directories looking for a cache file that matches the UUID
@@ -333,7 +302,6 @@ extern int dyld_shared_cache_iterate_text(const uuid_t cacheUuid, void (^callbac
 extern int dyld_shared_cache_find_iterate_text(const uuid_t cacheUuid, const char* extraSearchDirs[], void (^callback)(const dyld_shared_cache_dylib_text_info* info));
 #endif /* __BLOCKS */
 
-
 //
 // Returns if the specified address range is in a dyld owned memory
 // that is mapped read-only and will never be unloaded.
@@ -342,7 +310,6 @@ extern int dyld_shared_cache_find_iterate_text(const uuid_t cacheUuid, const cha
 //           iOS 10.0 and later
 extern bool _dyld_is_memory_immutable(const void* addr, size_t length);
 
-
 //
 // Finds the UUID (from LC_UUID load command) of given image.
 // Returns false if LC_UUID is missing or mach_header is malformed.
@@ -351,7 +318,6 @@ extern bool _dyld_is_memory_immutable(const void* addr, size_t length);
 // Exists in iOS 10.0 and later
 extern bool _dyld_get_image_uuid(const struct mach_header* mh, uuid_t uuid);
 
-
 //
 // Gets the UUID of the dyld shared cache in the current process.
 // Returns false if there is no dyld shared cache in use by the processes.
@@ -360,7 +326,6 @@ extern bool _dyld_get_image_uuid(const struct mach_header* mh, uuid_t uuid);
 // Exists in iOS 10.0 and later
 extern bool _dyld_get_shared_cache_uuid(uuid_t uuid);
 
-
 //
 // Returns the start address of the dyld cache in the process and sets length to the size of the cache.
 // Returns NULL if the process is not using a dyld shared cache
@@ -369,21 +334,19 @@ extern bool _dyld_get_shared_cache_uuid(uuid_t uuid);
 // Exists in iOS 11.0 and later
 extern const void* _dyld_get_shared_cache_range(size_t* length);
 
-
-
 //
 // When dyld must terminate a process because of a required dependent dylib
 // could not be loaded or a symbol is missing, dyld calls abort_with_reason()
 // using one of the following error codes.
 //
-#define DYLD_EXIT_REASON_DYLIB_MISSING          1
-#define DYLD_EXIT_REASON_DYLIB_WRONG_ARCH       2
-#define DYLD_EXIT_REASON_DYLIB_WRONG_VERSION    3
-#define DYLD_EXIT_REASON_SYMBOL_MISSING         4
-#define DYLD_EXIT_REASON_CODE_SIGNATURE         5
-#define DYLD_EXIT_REASON_FILE_SYSTEM_SANDBOX    6
-#define DYLD_EXIT_REASON_MALFORMED_MACHO        7
-#define DYLD_EXIT_REASON_OTHER                  9
+#define DYLD_EXIT_REASON_DYLIB_MISSING 1
+#define DYLD_EXIT_REASON_DYLIB_WRONG_ARCH 2
+#define DYLD_EXIT_REASON_DYLIB_WRONG_VERSION 3
+#define DYLD_EXIT_REASON_SYMBOL_MISSING 4
+#define DYLD_EXIT_REASON_CODE_SIGNATURE 5
+#define DYLD_EXIT_REASON_FILE_SYSTEM_SANDBOX 6
+#define DYLD_EXIT_REASON_MALFORMED_MACHO 7
+#define DYLD_EXIT_REASON_OTHER 9
 
 //
 // When it has more information about the termination, dyld will use abort_with_payload().
@@ -391,37 +354,33 @@ extern const void* _dyld_get_shared_cache_range(size_t* length);
 // payload for the corresponding string.  If the offset is zero, that string is not available.
 //
 struct dyld_abort_payload {
-	uint32_t version;                   // first version is 1
-	uint32_t flags;                     // 0x00000001 means dyld terminated at launch, backtrace not useful
-	uint32_t targetDylibPathOffset;     // offset in payload of path string to dylib that could not be loaded
-	uint32_t clientPathOffset;          // offset in payload of path string to image requesting dylib
-	uint32_t symbolOffset;              // offset in payload of symbol string that could not be found
-	// string data
+    uint32_t version;               // first version is 1
+    uint32_t flags;                 // 0x00000001 means dyld terminated at launch, backtrace not useful
+    uint32_t targetDylibPathOffset; // offset in payload of path string to dylib that could not be loaded
+    uint32_t clientPathOffset;      // offset in payload of path string to image requesting dylib
+    uint32_t symbolOffset;          // offset in payload of symbol string that could not be found
+                                    // string data
 };
 typedef struct dyld_abort_payload dyld_abort_payload;
 
-
 // These global variables are implemented in libdyld.dylib
 // Old programs that used crt1.o also defined these globals.
 // The ones in dyld are not used when an old program is run.
 extern int          NXArgc;
 extern const char** NXArgv;
-extern       char** environ;       // POSIX says this not const, because it pre-dates const
+extern char**       environ; // POSIX says this not const, because it pre-dates const
 extern const char*  __progname;
 
-
 // called by libSystem_initializer only
 extern void _dyld_initializer();
 
 // never called from source code. Used by static linker to implement lazy binding
 extern void dyld_stub_binder() __asm__("dyld_stub_binder");
 
-
 // called by exit() before it calls cxa_finalize() so that thread_local
 // objects are destroyed before global objects.
 extern void _tlv_exit();
 
-
 // temp exports to keep tapi happy, until ASan stops using dyldVersionNumber
 extern double      dyldVersionNumber;
 extern const char* dyldVersionString;
-- 
2.18.0.windows.1

